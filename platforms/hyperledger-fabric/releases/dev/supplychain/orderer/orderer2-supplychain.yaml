apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: supplychain-orderer2
  namespace: supplychain-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: supplychain-orderer2
  chart:
    git: git@github.com:ypevg/blockchain-automation-framework.git
    ref: local
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:2.2.0
        alpineutils: index.docker.io/hyperledgerlabs/alpine-utils:1.0
    annotations:  
      service:
        - example1: example2
      pvc:
      deployment:
    orderer:
      name: orderer2
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: raft

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: https://vault.test.b2bchain.tech
      role: vault-role
      authpath: devsupplychain-net-auth
      secretprefix: secret/crypto/ordererOrganizations/supplychain-net/orderers/orderer2.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth

    proxy:
      provider: haproxy
      external_url_suffix: org1ambassador.gcptest.b2bchain.tech

    genesis: |-
      CiIaIP89UuGYv80qLQNaHwh747qb8psoFaru4QCBT48Q7WiwEq1aCqpaCqdaCngKWggBEAEaBgietZyJBiIKc3lzY2hhbm5lbCpAYTlkZTU0MzVkYzY3NjcxMzk2YWQyYWRkY2YwMDRjN2ViZGFjMTRmMjdjMDUwYjY5MDBmNWU2MjI4YTQzYzE3YRIaEhh236aXnp+iOWdji2NQ79CS1IID5BpwNEQSqlkKp1kSpFkSj1QKB09yZGVyZXISg1QSsxgKDnN1cHBseWNoYWluTVNQEqAYGqwWCgNNU1ASpBYSmRYSlhYKDnN1cHBseWNoYWluTVNQEssGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRRENDQWVlZ0F3SUJBZ0lKQUlRUHFNWWs5U0trTUFvR0NDcUdTTTQ5QkFNQ01JR0RNUXN3Q1FZRFZRUUcKRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dU1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTQpCMDl5WkdWeVpYSXhRREErQmdOVkJBTU1OMk5oTG5OMWNIQnNlV05vWVdsdUxXNWxkQzV2Y21jeFlXMWlZWE56CllXUnZjaTVuWTNCMFpYTjBMbUl5WW1Ob1lXbHVMblJsWTJnd0hoY05NakV3T0RJMk1EUXlPREl5V2hjTk1qUXcKTmpFMU1EUXlPREl5V2pDQmd6RUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwRwpBMVVFQnd3R1RHOXVaRzl1TVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVVBd1BnWURWUVFERERkallTNXpkWEJ3CmJIbGphR0ZwYmkxdVpYUXViM0puTVdGdFltRnpjMkZrYjNJdVoyTndkR1Z6ZEM1aU1tSmphR0ZwYmk1MFpXTm8KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFR1ZRdEx4eGdkbmJnQXdESldGZDhVdmQweGdyZgp5T2x6TVlReXdnemdwemlVWG9DTkFmSFRDTnlObDJSRjlmNk1SOE9pQWZKenpHcTdBclNIZEpNZFdLTkNNRUF3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRFZSME9CQllFRkNLL3BDRHkKRmxYSTBKZUd4QWQrQUdYM0I5OGZNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJRWlaR0c1UFBuZDhYRCtuNURBWApFRG9TUFpqTVhDNVdVSnFIb2t4TFdONVlBaUFTK2gvTTNxZkpMcEV2Y0pzRVo4bWRaVzROWW9udUhxWDlBUmdwCnZGZGNadz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KItcILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQXE2Z0F3SUJBZ0lVSjltVnB6eDJuazgrZVg2TG4wd3crSnI4MzNVd0NnWUlLb1pJemowRUF3SXcKZ1lNeEN6QUpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdgpiakVRTUE0R0ExVUVDZ3dIVDNKa1pYSmxjakZBTUQ0R0ExVUVBd3czWTJFdWMzVndjR3g1WTJoaGFXNHRibVYwCkxtOXlaekZoYldKaGMzTmhaRzl5TG1kamNIUmxjM1F1WWpKaVkyaGhhVzR1ZEdWamFEQWVGdzB5TVRBNE1qWXcKTkRNeE1EQmFGdzB5TWpBNE1qWXdORE0yTURCYU1Hd3hDekFKQmdOVkJBWVRBa2RDTVJzd0dRWURWUVFIRXhJMQpNUzQxTUM4dE1DNHhNeTlNYjI1a2IyNHhFREFPQmdOVkJBb1RCMDl5WkdWeVpYSXhEakFNQmdOVkJBc1RCV0ZrCmJXbHVNUjR3SEFZRFZRUUREQlZCWkcxcGJrQnpkWEJ3YkhsamFHRnBiaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUIKQmdncWhrak9QUU1CQndOQ0FBUTg4eHMzTnNsbkRMcmVwL3JqdnZ4cld6UzA3N1JTRXFVNTh3K1lmYy9zanpQUgprM1lMOUxiaG9Zc3NDR1pBb1grc0lCSUp0ejMrRTBDcEM5V216OFdIbzRJQkZEQ0NBUkF3RGdZRFZSMFBBUUgvCkJBUURBZ2VBTUF3R0ExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGRzVDclM1ZGNkUXFoTWV6V0RrVlRKeWUKVFJiU01COEdBMVVkSXdRWU1CYUFGQ0svcENEeUZsWEkwSmVHeEFkK0FHWDNCOThmTUNRR0ExVWRFUVFkTUJ1QwpHV05oTFhSdmIyeHpMVGM0TjJJMFpqbG1ZMlF0WTNOMmJHWXdnWWtHQ0NvREJBVUdCd2dCQkgxN0ltRjBkSEp6CklqcDdJbUZpWVdNdWFXNXBkQ0k2SW5SeWRXVWlMQ0poWkcxcGJpSTZJblJ5ZFdVaUxDSm9aaTVCWm1acGJHbGgKZEdsdmJpSTZJaUlzSW1obUxrVnVjbTlzYkcxbGJuUkpSQ0k2SWtGa2JXbHVRSE4xY0hCc2VXTm9ZV2x1TFc1bApkQ0lzSW1obUxsUjVjR1VpT2lKaFpHMXBiaUo5ZlRBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQWl6K1hYUjMvCnJWL2dDVVNSbW5rWmhCRnA3ZjB0cld6VDF6UHFnZ1d0eE40Q0lFNlpBTjhpL3FvcE52bS83eEJ2UjE2THVwNTQKQXhaWGlYa0ZmN0RsK1hUNQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCkIOCgRTSEEyEgZTSEEyNTZKywYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ1FEQ0NBZWVnQXdJQkFnSUpBSVFQcU1ZazlTS2tNQW9HQ0NxR1NNNDlCQU1DTUlHRE1Rc3dDUVlEVlFRRwpFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RURBT0JnTlZCQW9NCkIwOXlaR1Z5WlhJeFFEQStCZ05WQkFNTU4yTmhMbk4xY0hCc2VXTm9ZV2x1TFc1bGRDNXZjbWN4WVcxaVlYTnoKWVdSdmNpNW5ZM0IwWlhOMExtSXlZbU5vWVdsdUxuUmxZMmd3SGhjTk1qRXdPREkyTURReU9ESXlXaGNOTWpRdwpOakUxTURReU9ESXlXakNCZ3pFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHCkExVUVCd3dHVEc5dVpHOXVNUkF3RGdZRFZRUUtEQWRQY21SbGNtVnlNVUF3UGdZRFZRUURERGRqWVM1emRYQncKYkhsamFHRnBiaTF1WlhRdWIzSm5NV0Z0WW1GemMyRmtiM0l1WjJOd2RHVnpkQzVpTW1KamFHRnBiaTUwWldObwpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVHVlF0THh4Z2RuYmdBd0RKV0ZkOFV2ZDB4Z3JmCnlPbHpNWVF5d2d6Z3B6aVVYb0NOQWZIVENOeU5sMlJGOWY2TVI4T2lBZkp6ekdxN0FyU0hkSk1kV0tOQ01FQXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEVlIwT0JCWUVGQ0svcENEeQpGbFhJMEplR3hBZCtBR1gzQjk4Zk1Bb0dDQ3FHU000OUJBTUNBMGNBTUVRQ0lFaVpHRzVQUG5kOFhEK241REFYCkVEb1NQWmpNWEM1V1VKcUhva3hMV041WUFpQVMraC9NM3FmSkxwRXZjSnNFWjhtZFpXNE5Zb251SHFYOUFSZ3AKdkZkY1p3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoaBkFkbWlucyI3CgdXcml0ZXJzEiwSIggBEh4SCBIGCAESAggAGhISEAoOc3VwcGx5Y2hhaW5NU1AaBkFkbWlucyI4CgZBZG1pbnMSLhIkCAESIBIIEgYIARICCAAaFBISCg5zdXBwbHljaGFpbk1TUBABGgZBZG1pbnMiOwoLRW5kb3JzZW1lbnQSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zIjcKB1JlYWRlcnMSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zKgZBZG1pbnMaJAoMQ2FwYWJpbGl0aWVzEhQSCgoICgRWMl8wEgAaBkFkbWlucxqfOQoNQ29uc2Vuc3VzVHlwZRKNORKCOQoIZXRjZHJhZnQS9TgK8BIKLW9yZGVyZXIxLm9yZzFhbWJhc3NhZG9yLmdjcHRlc3QuYjJiY2hhaW4udGVjaBD7QRqcCS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlET3pDQ0F1S2dBd0lCQWdJVVBHNjAxQThCeUJTelpWNHRNekFOanhQaXBqZ3dDZ1lJS29aSXpqMEVBd0l3CmdZTXhDekFKQmdOVkJBWVRBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnYKYmpFUU1BNEdBMVVFQ2d3SFQzSmtaWEpsY2pGQU1ENEdBMVVFQXd3M1kyRXVjM1Z3Y0d4NVkyaGhhVzR0Ym1WMApMbTl5WnpGaGJXSmhjM05oWkc5eUxtZGpjSFJsYzNRdVlqSmlZMmhoYVc0dWRHVmphREFlRncweU1UQTRNall3Ck5ETXlNREJhRncweU1qQTRNall3TkRNM01EQmFNSEV4Q3pBSkJnTlZCQVlUQWtkQ01Sc3dHUVlEVlFRSEV4STEKTVM0MU1DOHRNQzR4TXk5TWIyNWtiMjR4RURBT0JnTlZCQW9UQjA5eVpHVnlaWEl4RURBT0JnTlZCQXNUQjI5eQpaR1Z5WlhJeElUQWZCZ05WQkFNVEdHOXlaR1Z5WlhJeExuTjFjSEJzZVdOb1lXbHVMVzVsZERCWk1CTUdCeXFHClNNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJOL1ZQdWRSN3VBWlBhalNHNXJsSXlUOEVaQ1FITmQwOEZ6SWNWTnIKamNOR2JhK3RKTnRCS0hXVnhNT2xuSHZ6amp1KzdJeDlTSndTZlFqQmVjMTMvZytqZ2dGRE1JSUJQekFPQmdOVgpIUThCQWY4RUJBTUNBNmd3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkCkV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZEWUZ4TlZNb0pJaWFhM0JXNDZzZ0NadE8rM29NQjhHQTFVZEl3UVkKTUJhQUZDSy9wQ0R5RmxYSTBKZUd4QWQrQUdYM0I5OGZNRklHQTFVZEVRUkxNRW1DR0c5eVpHVnlaWEl4TG5OMQpjSEJzZVdOb1lXbHVMVzVsZElJdGIzSmtaWEpsY2pFdWIzSm5NV0Z0WW1GemMyRmtiM0l1WjJOd2RHVnpkQzVpCk1tSmphR0ZwYmk1MFpXTm9NR3dHQ0NvREJBVUdCd2dCQkdCN0ltRjBkSEp6SWpwN0ltaG1Ma0ZtWm1sc2FXRjAKYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pYjNKa1pYSmxjakV1YzNWd2NHeDVZMmhoYVc0dApibVYwSWl3aWFHWXVWSGx3WlNJNkltOXlaR1Z5WlhJaWZYMHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdlMmZOCjl1Y1VUQkVLb2JJNWVwWGt6enczd0ZidkNUNmtkWXNOL2FHRWNKd0NJRHZwcXB1ekRpSkhQenV5Yy9zSGlmRzMKRjNOYWRYMXY2Z0phMGY2TGNiMUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoinAktLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRE96Q0NBdUtnQXdJQkFnSVVQRzYwMUE4QnlCU3paVjR0TXpBTmp4UGlwamd3Q2dZSUtvWkl6ajBFQXdJdwpnWU14Q3pBSkJnTlZCQVlUQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2CmJqRVFNQTRHQTFVRUNnd0hUM0prWlhKbGNqRkFNRDRHQTFVRUF3dzNZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjAKTG05eVp6RmhiV0poYzNOaFpHOXlMbWRqY0hSbGMzUXVZakppWTJoaGFXNHVkR1ZqYURBZUZ3MHlNVEE0TWpZdwpORE15TURCYUZ3MHlNakE0TWpZd05ETTNNREJhTUhFeEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRFZRUUhFeEkxCk1TNDFNQzh0TUM0eE15OU1iMjVrYjI0eEVEQU9CZ05WQkFvVEIwOXlaR1Z5WlhJeEVEQU9CZ05WQkFzVEIyOXkKWkdWeVpYSXhJVEFmQmdOVkJBTVRHRzl5WkdWeVpYSXhMbk4xY0hCc2VXTm9ZV2x1TFc1bGREQlpNQk1HQnlxRwpTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTi9WUHVkUjd1QVpQYWpTRzVybEl5VDhFWkNRSE5kMDhGekljVk5yCmpjTkdiYSt0Sk50QktIV1Z4TU9sbkh2empqdSs3SXg5U0p3U2ZRakJlYzEzL2cramdnRkRNSUlCUHpBT0JnTlYKSFE4QkFmOEVCQU1DQTZnd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGRFlGeE5WTW9KSWlhYTNCVzQ2c2dDWnRPKzNvTUI4R0ExVWRJd1FZCk1CYUFGQ0svcENEeUZsWEkwSmVHeEFkK0FHWDNCOThmTUZJR0ExVWRFUVJMTUVtQ0dHOXlaR1Z5WlhJeExuTjEKY0hCc2VXTm9ZV2x1TFc1bGRJSXRiM0prWlhKbGNqRXViM0puTVdGdFltRnpjMkZrYjNJdVoyTndkR1Z6ZEM1aQpNbUpqYUdGcGJpNTBaV05vTUd3R0NDb0RCQVVHQndnQkJHQjdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwCmFXOXVJam9pSWl3aWFHWXVSVzV5YjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2pFdWMzVndjR3g1WTJoaGFXNHQKYm1WMElpd2lhR1l1Vkhsd1pTSTZJbTl5WkdWeVpYSWlmWDB3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnZTJmTgo5dWNVVEJFS29iSTVlcFhrenp3M3dGYnZDVDZrZFlzTi9hR0VjSndDSUR2cHFwdXpEaUpIUHp1eWMvc0hpZkczCkYzTmFkWDF2NmdKYTBmNkxjYjFMCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KCvASCi1vcmRlcmVyMi5vcmcxYW1iYXNzYWRvci5nY3B0ZXN0LmIyYmNoYWluLnRlY2gQ+0EanAktLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRE96Q0NBdUtnQXdJQkFnSVVUMVRFangrc0tCR0N1REs3ZHkwRllLbDZQTkl3Q2dZSUtvWkl6ajBFQXdJdwpnWU14Q3pBSkJnTlZCQVlUQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2CmJqRVFNQTRHQTFVRUNnd0hUM0prWlhKbGNqRkFNRDRHQTFVRUF3dzNZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjAKTG05eVp6RmhiV0poYzNOaFpHOXlMbWRqY0hSbGMzUXVZakppWTJoaGFXNHVkR1ZqYURBZUZ3MHlNVEE0TWpZdwpORE15TURCYUZ3MHlNakE0TWpZd05ETTNNREJhTUhFeEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRFZRUUhFeEkxCk1TNDFNQzh0TUM0eE15OU1iMjVrYjI0eEVEQU9CZ05WQkFvVEIwOXlaR1Z5WlhJeEVEQU9CZ05WQkFzVEIyOXkKWkdWeVpYSXhJVEFmQmdOVkJBTVRHRzl5WkdWeVpYSXlMbk4xY0hCc2VXTm9ZV2x1TFc1bGREQlpNQk1HQnlxRwpTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCSk56cHJkUDVKbE1idEgvcXJVUXpWWis4WG5WdmNQcHU5cGpLSmZLClhDSVJDTEp2MFcrUnRqd0h2M3FibUpkdnFmMEFJY2dwSEVYdkkwbmp3OHVqWS9xamdnRkRNSUlCUHpBT0JnTlYKSFE4QkFmOEVCQU1DQTZnd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGQzgzNEVWTTk5RmZuQ0VaVVFheWZlS2tCR2FTTUI4R0ExVWRJd1FZCk1CYUFGQ0svcENEeUZsWEkwSmVHeEFkK0FHWDNCOThmTUZJR0ExVWRFUVJMTUVtQ0dHOXlaR1Z5WlhJeUxuTjEKY0hCc2VXTm9ZV2x1TFc1bGRJSXRiM0prWlhKbGNqSXViM0puTVdGdFltRnpjMkZrYjNJdVoyTndkR1Z6ZEM1aQpNbUpqYUdGcGJpNTBaV05vTUd3R0NDb0RCQVVHQndnQkJHQjdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwCmFXOXVJam9pSWl3aWFHWXVSVzV5YjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2pJdWMzVndjR3g1WTJoaGFXNHQKYm1WMElpd2lhR1l1Vkhsd1pTSTZJbTl5WkdWeVpYSWlmWDB3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnTTAwRQppclgwWWN6TXlRZ2VxU1VjRnlDS0t4M1NjdDZUSXFvaEZ3Y2pnVHdDSUZaOFpUYmRoSFhmVVprTjJlSjZGa0hZCjlSaGExU3NhUmsxNFZSWDQ5eTB5Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIpwJLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQXVLZ0F3SUJBZ0lVVDFURWp4K3NLQkdDdURLN2R5MEZZS2w2UE5Jd0NnWUlLb1pJemowRUF3SXcKZ1lNeEN6QUpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdgpiakVRTUE0R0ExVUVDZ3dIVDNKa1pYSmxjakZBTUQ0R0ExVUVBd3czWTJFdWMzVndjR3g1WTJoaGFXNHRibVYwCkxtOXlaekZoYldKaGMzTmhaRzl5TG1kamNIUmxjM1F1WWpKaVkyaGhhVzR1ZEdWamFEQWVGdzB5TVRBNE1qWXcKTkRNeU1EQmFGdzB5TWpBNE1qWXdORE0zTURCYU1IRXhDekFKQmdOVkJBWVRBa2RDTVJzd0dRWURWUVFIRXhJMQpNUzQxTUM4dE1DNHhNeTlNYjI1a2IyNHhFREFPQmdOVkJBb1RCMDl5WkdWeVpYSXhFREFPQmdOVkJBc1RCMjl5ClpHVnlaWEl4SVRBZkJnTlZCQU1UR0c5eVpHVnlaWEl5TG5OMWNIQnNlV05vWVdsdUxXNWxkREJaTUJNR0J5cUcKU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpOenByZFA1SmxNYnRIL3FyVVF6VlorOFhuVnZjUHB1OXBqS0pmSwpYQ0lSQ0xKdjBXK1J0andIdjNxYm1KZHZxZjBBSWNncEhFWHZJMG5qdzh1alkvcWpnZ0ZETUlJQlB6QU9CZ05WCkhROEJBZjhFQkFNQ0E2Z3dIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWQKRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRkM4MzRFVk05OUZmbkNFWlVRYXlmZUtrQkdhU01COEdBMVVkSXdRWQpNQmFBRkNLL3BDRHlGbFhJMEplR3hBZCtBR1gzQjk4Zk1GSUdBMVVkRVFSTE1FbUNHRzl5WkdWeVpYSXlMbk4xCmNIQnNlV05vWVdsdUxXNWxkSUl0YjNKa1pYSmxjakl1YjNKbk1XRnRZbUZ6YzJGa2IzSXVaMk53ZEdWemRDNWkKTW1KamFHRnBiaTUwWldOb01Hd0dDQ29EQkFVR0J3Z0JCR0I3SW1GMGRISnpJanA3SW1obUxrRm1abWxzYVdGMAphVzl1SWpvaUlpd2lhR1l1Ulc1eWIyeHNiV1Z1ZEVsRUlqb2liM0prWlhKbGNqSXVjM1Z3Y0d4NVkyaGhhVzR0CmJtVjBJaXdpYUdZdVZIbHdaU0k2SW05eVpHVnlaWElpZlgwd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ00wMEUKaXJYMFljek15UWdlcVNVY0Z5Q0tLeDNTY3Q2VElxb2hGd2NqZ1R3Q0lGWjhaVGJkaEhYZlVaa04yZUo2RmtIWQo5UmhhMVNzYVJrMTRWUlg0OXkweQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCgr4Egotb3JkZXJlcjMub3JnMWFtYmFzc2Fkb3IuZ2NwdGVzdC5iMmJjaGFpbi50ZWNoEPtBGqAJLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQRENDQXVLZ0F3SUJBZ0lVT1J4dndGeTdaMmtBeTNod3JhT2RDQ05ZUW9Jd0NnWUlLb1pJemowRUF3SXcKZ1lNeEN6QUpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdgpiakVRTUE0R0ExVUVDZ3dIVDNKa1pYSmxjakZBTUQ0R0ExVUVBd3czWTJFdWMzVndjR3g1WTJoaGFXNHRibVYwCkxtOXlaekZoYldKaGMzTmhaRzl5TG1kamNIUmxjM1F1WWpKaVkyaGhhVzR1ZEdWamFEQWVGdzB5TVRBNE1qWXcKTkRNeU1EQmFGdzB5TWpBNE1qWXdORE0zTURCYU1IRXhDekFKQmdOVkJBWVRBa2RDTVJzd0dRWURWUVFIRXhJMQpNUzQxTUM4dE1DNHhNeTlNYjI1a2IyNHhFREFPQmdOVkJBb1RCMDl5WkdWeVpYSXhFREFPQmdOVkJBc1RCMjl5ClpHVnlaWEl4SVRBZkJnTlZCQU1UR0c5eVpHVnlaWEl6TG5OMWNIQnNlV05vWVdsdUxXNWxkREJaTUJNR0J5cUcKU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkR4UVhUODEyY1RpM0xrMmE5akJPeUZmR2F3Mk5GR21qdWdSMGt6bwo3TnRyTVRRcDYzaG0yY0tmWmJ1QmdwMXJNQitXVG4yUVh0Y0h2VDd6WEkvRGc4eWpnZ0ZETUlJQlB6QU9CZ05WCkhROEJBZjhFQkFNQ0E2Z3dIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWQKRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRk4wcUNRQ0M2N0JUUmZDUVkxVkxINEpiTkhsN01COEdBMVVkSXdRWQpNQmFBRkNLL3BDRHlGbFhJMEplR3hBZCtBR1gzQjk4Zk1GSUdBMVVkRVFSTE1FbUNHRzl5WkdWeVpYSXpMbk4xCmNIQnNlV05vWVdsdUxXNWxkSUl0YjNKa1pYSmxjak11YjNKbk1XRnRZbUZ6YzJGa2IzSXVaMk53ZEdWemRDNWkKTW1KamFHRnBiaTUwWldOb01Hd0dDQ29EQkFVR0J3Z0JCR0I3SW1GMGRISnpJanA3SW1obUxrRm1abWxzYVdGMAphVzl1SWpvaUlpd2lhR1l1Ulc1eWIyeHNiV1Z1ZEVsRUlqb2liM0prWlhKbGNqTXVjM1Z3Y0d4NVkyaGhhVzR0CmJtVjBJaXdpYUdZdVZIbHdaU0k2SW05eVpHVnlaWElpZlgwd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFPL1oKSkdZZDlTOExjTko2bUVLRXVaQm9KZVp0SnpXWjRrb1VWRFg1TWxHdUFpQS96TVpzdW5SdDRlbzBKVkN1cUZ1SwpCR1B5T3hyNHlmT0pBNFBFRFA1TGV3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoioAktLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRFBEQ0NBdUtnQXdJQkFnSVVPUnh2d0Z5N1oya0F5M2h3cmFPZENDTllRb0l3Q2dZSUtvWkl6ajBFQXdJdwpnWU14Q3pBSkJnTlZCQVlUQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2CmJqRVFNQTRHQTFVRUNnd0hUM0prWlhKbGNqRkFNRDRHQTFVRUF3dzNZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjAKTG05eVp6RmhiV0poYzNOaFpHOXlMbWRqY0hSbGMzUXVZakppWTJoaGFXNHVkR1ZqYURBZUZ3MHlNVEE0TWpZdwpORE15TURCYUZ3MHlNakE0TWpZd05ETTNNREJhTUhFeEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRFZRUUhFeEkxCk1TNDFNQzh0TUM0eE15OU1iMjVrYjI0eEVEQU9CZ05WQkFvVEIwOXlaR1Z5WlhJeEVEQU9CZ05WQkFzVEIyOXkKWkdWeVpYSXhJVEFmQmdOVkJBTVRHRzl5WkdWeVpYSXpMbk4xY0hCc2VXTm9ZV2x1TFc1bGREQlpNQk1HQnlxRwpTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCRHhRWFQ4MTJjVGkzTGsyYTlqQk95RmZHYXcyTkZHbWp1Z1Iwa3pvCjdOdHJNVFFwNjNobTJjS2ZaYnVCZ3Axck1CK1dUbjJRWHRjSHZUN3pYSS9EZzh5amdnRkRNSUlCUHpBT0JnTlYKSFE4QkFmOEVCQU1DQTZnd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGTjBxQ1FDQzY3QlRSZkNRWTFWTEg0SmJOSGw3TUI4R0ExVWRJd1FZCk1CYUFGQ0svcENEeUZsWEkwSmVHeEFkK0FHWDNCOThmTUZJR0ExVWRFUVJMTUVtQ0dHOXlaR1Z5WlhJekxuTjEKY0hCc2VXTm9ZV2x1TFc1bGRJSXRiM0prWlhKbGNqTXViM0puTVdGdFltRnpjMkZrYjNJdVoyTndkR1Z6ZEM1aQpNbUpqYUdGcGJpNTBaV05vTUd3R0NDb0RCQVVHQndnQkJHQjdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwCmFXOXVJam9pSWl3aWFHWXVSVzV5YjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2pNdWMzVndjR3g1WTJoaGFXNHQKYm1WMElpd2lhR1l1Vkhsd1pTSTZJbTl5WkdWeVpYSWlmWDB3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU8vWgpKR1lkOVM4TGNOSjZtRUtFdVpCb0plWnRKeldaNGtvVVZEWDVNbEd1QWlBL3pNWnN1blJ0NGVvMEpWQ3VxRnVLCkJHUHlPeHI0eWZPSkE0UEVEUDVMZXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChISCgU1MDBtcxAKGAEgBSiAgIAIGgZBZG1pbnMaIgoJQmF0Y2hTaXplEhUSCwgKEICAgDEYgIBAGgZBZG1pbnMaHgoMQmF0Y2hUaW1lb3V0Eg4SBAoCMnMaBkFkbWlucxofChNDaGFubmVsUmVzdHJpY3Rpb25zEggaBkFkbWlucyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyIqCg9CbG9ja1ZhbGlkYXRpb24SFxINCAMSCQoHV3JpdGVycxoGQWRtaW5zKgZBZG1pbnMSzgEKC0NvbnNvcnRpdW1zEr4BEnQKFVN1cHBseUNoYWluQ29uc29ydGl1bRJbGkAKFUNoYW5uZWxDcmVhdGlvblBvbGljeRInEgwIAxIICgZBZG1pbnMaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucyItCgZBZG1pbnMSIxIICAESBBICEgAaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucxotChlCbG9ja0RhdGFIYXNoaW5nU3RydWN0dXJlEhASBgj/////DxoGQWRtaW5zGs0BChBPcmRlcmVyQWRkcmVzc2VzErgBEpwBCjJvcmRlcmVyMS5vcmcxYW1iYXNzYWRvci5nY3B0ZXN0LmIyYmNoYWluLnRlY2g6ODQ0Mwoyb3JkZXJlcjIub3JnMWFtYmFzc2Fkb3IuZ2NwdGVzdC5iMmJjaGFpbi50ZWNoOjg0NDMKMm9yZGVyZXIzLm9yZzFhbWJhc3NhZG9yLmdjcHRlc3QuYjJiY2hhaW4udGVjaDo4NDQzGhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucxokCgxDYXBhYmlsaXRpZXMSFBIKCggKBFYyXzASABoGQWRtaW5zGiYKEEhhc2hpbmdBbGdvcml0aG0SEhIICgZTSEEyNTYaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyoGQWRtaW5zGg4KBAoCCgAKAAoACgAKAA==
